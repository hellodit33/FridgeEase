{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState } from \"react\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport FlatButton from \"../../UI/FlatButton\";\nimport AuthForm from \"./AuthForm\";\nimport Colors from \"../../../constants/Colors\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction AuthContent(_ref) {\n  var isLogin = _ref.isLogin,\n      onAuthenticate = _ref.onAuthenticate;\n  var navigation = useNavigation();\n\n  var _useState = useState({\n    email: false,\n    password: false,\n    confirmPassword: false\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      credentialsInvalid = _useState2[0],\n      setCredentialsInvalid = _useState2[1];\n\n  function switchAuthModeHandler() {\n    if (isLogin) {\n      navigation.replace(\"Signup\");\n    } else {\n      navigation.replace(\"Login\");\n    }\n  }\n\n  function submitHandler(credentials) {\n    var email = credentials.email,\n        password = credentials.password,\n        confirmPassword = credentials.confirmPassword;\n    email = email.trim();\n    password = password.trim();\n    var emailIsValid = email.includes(\"@\");\n    var passwordIsValid = password.length > 6;\n    var passwordsAreEqual = password === confirmPassword;\n\n    if (!emailIsValid || !passwordIsValid || !isLogin && !passwordsAreEqual) {\n      Alert.alert(\"Invalid input\", \"Please check your entered credentials.\");\n      setCredentialsInvalid({\n        email: !emailIsValid,\n        password: !passwordIsValid,\n        confirmPassword: !passwordIsValid || !passwordsAreEqual\n      });\n      return;\n    }\n\n    onAuthenticate({\n      email: email,\n      password: password\n    });\n  }\n\n  return _jsxs(KeyboardAvoidingView, {\n    behavior: Platform.OS === \"ios\" ? \"padding\" : \"height\",\n    style: styles.authContent,\n    children: [_jsx(AuthForm, {\n      isLogin: isLogin,\n      onSubmit: submitHandler,\n      credentialsInvalid: credentialsInvalid\n    }), _jsx(ScrollView, {\n      style: styles.buttons,\n      children: _jsx(FlatButton, {\n        onPress: switchAuthModeHandler,\n        children: isLogin ? \"Är du ny användare? Bli medlem\" : \"Eller fortsätt med att logga in\"\n      })\n    })]\n  });\n}\n\nexport default AuthContent;\nvar styles = StyleSheet.create({\n  authContent: {\n    marginHorizontal: 32,\n    borderRadius: 8\n  },\n  buttons: {}\n});","map":{"version":3,"names":["useState","FlatButton","AuthForm","Colors","useNavigation","AuthContent","isLogin","onAuthenticate","navigation","email","password","confirmPassword","credentialsInvalid","setCredentialsInvalid","switchAuthModeHandler","replace","submitHandler","credentials","trim","emailIsValid","includes","passwordIsValid","length","passwordsAreEqual","Alert","alert","Platform","OS","styles","authContent","buttons","StyleSheet","create","marginHorizontal","borderRadius"],"sources":["/Users/elodiepradet/Documents/react native/Fridgeease/src/components/Auth/AuthContent.js"],"sourcesContent":["import { useState } from \"react\";\nimport {\n  Alert,\n  StyleSheet,\n  View,\n  KeyboardAvoidingView,\n  ScrollView,\n  Platform,\n} from \"react-native\";\n\nimport FlatButton from \"../../UI/FlatButton\";\nimport AuthForm from \"./AuthForm\";\nimport Colors from \"../../../constants/Colors\";\nimport { useNavigation } from \"@react-navigation/native\";\n\nfunction AuthContent({ isLogin, onAuthenticate }) {\n  const navigation = useNavigation();\n  const [credentialsInvalid, setCredentialsInvalid] = useState({\n    email: false,\n    password: false,\n    confirmPassword: false,\n  });\n\n  function switchAuthModeHandler() {\n    if (isLogin) {\n      navigation.replace(\"Signup\");\n    } else {\n      navigation.replace(\"Login\");\n    }\n  }\n\n  function submitHandler(credentials) {\n    let { email, password, confirmPassword } = credentials;\n\n    email = email.trim();\n    password = password.trim();\n\n    const emailIsValid = email.includes(\"@\");\n    const passwordIsValid = password.length > 6;\n    const passwordsAreEqual = password === confirmPassword;\n\n    if (!emailIsValid || !passwordIsValid || (!isLogin && !passwordsAreEqual)) {\n      Alert.alert(\"Invalid input\", \"Please check your entered credentials.\");\n      setCredentialsInvalid({\n        email: !emailIsValid,\n        password: !passwordIsValid,\n        confirmPassword: !passwordIsValid || !passwordsAreEqual,\n      });\n      return;\n    }\n    onAuthenticate({ email, password });\n  }\n\n  return (\n    <KeyboardAvoidingView\n      behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\n      style={styles.authContent}\n    >\n      <AuthForm\n        isLogin={isLogin}\n        onSubmit={submitHandler}\n        credentialsInvalid={credentialsInvalid}\n      />\n      <ScrollView style={styles.buttons}>\n        <FlatButton onPress={switchAuthModeHandler}>\n          {isLogin\n            ? \"Är du ny användare? Bli medlem\"\n            : \"Eller fortsätt med att logga in\"}\n        </FlatButton>\n      </ScrollView>\n    </KeyboardAvoidingView>\n  );\n}\n\nexport default AuthContent;\n\nconst styles = StyleSheet.create({\n  authContent: {\n    marginHorizontal: 32,\n    borderRadius: 8,\n  },\n  buttons: {},\n});\n"],"mappings":";AAAA,SAASA,QAAT,QAAyB,OAAzB;;;;;;;AAUA,OAAOC,UAAP;AACA,OAAOC,QAAP;AACA,OAAOC,MAAP;AACA,SAASC,aAAT,QAA8B,0BAA9B;;;;AAEA,SAASC,WAAT,OAAkD;EAAA,IAA3BC,OAA2B,QAA3BA,OAA2B;EAAA,IAAlBC,cAAkB,QAAlBA,cAAkB;EAChD,IAAMC,UAAU,GAAGJ,aAAa,EAAhC;;EACA,gBAAoDJ,QAAQ,CAAC;IAC3DS,KAAK,EAAE,KADoD;IAE3DC,QAAQ,EAAE,KAFiD;IAG3DC,eAAe,EAAE;EAH0C,CAAD,CAA5D;EAAA;EAAA,IAAOC,kBAAP;EAAA,IAA2BC,qBAA3B;;EAMA,SAASC,qBAAT,GAAiC;IAC/B,IAAIR,OAAJ,EAAa;MACXE,UAAU,CAACO,OAAX,CAAmB,QAAnB;IACD,CAFD,MAEO;MACLP,UAAU,CAACO,OAAX,CAAmB,OAAnB;IACD;EACF;;EAED,SAASC,aAAT,CAAuBC,WAAvB,EAAoC;IAClC,IAAMR,KAAN,GAA2CQ,WAA3C,CAAMR,KAAN;IAAA,IAAaC,QAAb,GAA2CO,WAA3C,CAAaP,QAAb;IAAA,IAAuBC,eAAvB,GAA2CM,WAA3C,CAAuBN,eAAvB;IAEAF,KAAK,GAAGA,KAAK,CAACS,IAAN,EAAR;IACAR,QAAQ,GAAGA,QAAQ,CAACQ,IAAT,EAAX;IAEA,IAAMC,YAAY,GAAGV,KAAK,CAACW,QAAN,CAAe,GAAf,CAArB;IACA,IAAMC,eAAe,GAAGX,QAAQ,CAACY,MAAT,GAAkB,CAA1C;IACA,IAAMC,iBAAiB,GAAGb,QAAQ,KAAKC,eAAvC;;IAEA,IAAI,CAACQ,YAAD,IAAiB,CAACE,eAAlB,IAAsC,CAACf,OAAD,IAAY,CAACiB,iBAAvD,EAA2E;MACzEC,KAAK,CAACC,KAAN,CAAY,eAAZ,EAA6B,wCAA7B;MACAZ,qBAAqB,CAAC;QACpBJ,KAAK,EAAE,CAACU,YADY;QAEpBT,QAAQ,EAAE,CAACW,eAFS;QAGpBV,eAAe,EAAE,CAACU,eAAD,IAAoB,CAACE;MAHlB,CAAD,CAArB;MAKA;IACD;;IACDhB,cAAc,CAAC;MAAEE,KAAK,EAALA,KAAF;MAASC,QAAQ,EAARA;IAAT,CAAD,CAAd;EACD;;EAED,OACE,MAAC,oBAAD;IACE,QAAQ,EAAEgB,QAAQ,CAACC,EAAT,KAAgB,KAAhB,GAAwB,SAAxB,GAAoC,QADhD;IAEE,KAAK,EAAEC,MAAM,CAACC,WAFhB;IAAA,WAIE,KAAC,QAAD;MACE,OAAO,EAAEvB,OADX;MAEE,QAAQ,EAAEU,aAFZ;MAGE,kBAAkB,EAAEJ;IAHtB,EAJF,EASE,KAAC,UAAD;MAAY,KAAK,EAAEgB,MAAM,CAACE,OAA1B;MAAA,UACE,KAAC,UAAD;QAAY,OAAO,EAAEhB,qBAArB;QAAA,UACGR,OAAO,GACJ,gCADI,GAEJ;MAHN;IADF,EATF;EAAA,EADF;AAmBD;;AAED,eAAeD,WAAf;AAEA,IAAMuB,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;EAC/BH,WAAW,EAAE;IACXI,gBAAgB,EAAE,EADP;IAEXC,YAAY,EAAE;EAFH,CADkB;EAK/BJ,OAAO,EAAE;AALsB,CAAlB,CAAf"},"metadata":{},"sourceType":"module"}