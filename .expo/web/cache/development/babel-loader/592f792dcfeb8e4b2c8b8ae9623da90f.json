{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nexport var REGISTER_USER_SUCCESS = \"REGISTER_USER_SUCCESS\";\nexport var REGISTER_USER_FAIL = \"REGISTER_USER_FAIL\";\nexport var LOGIN_USER_SUCCESS = \"LOGIN_USER_SUCCESS\";\nexport var LOGIN_USER_FAIL = \"LOGIN_USER_FAIL\";\nvar BASE_URL = \"https://da35-213-163-151-83.eu.ngrok.io\";\nexport var registerUser = function registerUser(authData) {\n  var email = authData.email,\n      password = authData.password;\n  return function () {\n    var _ref = _asyncToGenerator(function* (dispatch) {\n      var result = yield fetch(BASE_URL + \"/api/user/register\", {\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email: email,\n          password: password\n        })\n      });\n      var resultData = yield result.json();\n      console.log(resultData);\n      console.log(\"made it\");\n\n      if (resultData.success) {\n        dispatch({\n          type: REGISTER_USER_SUCCESS,\n          payload: resultData\n        });\n      } else {\n        dispatch({\n          type: REGISTER_USER_FAIL,\n          payload: resultData\n        });\n      }\n\n      return resultData;\n    });\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var loginUser = function loginUser(authData) {\n  var email = authData.email,\n      password = authData.password;\n  return function () {\n    var _ref2 = _asyncToGenerator(function* (dispatch) {\n      var result = yield fetch(BASE_URL + \"/api/user/login\", {\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email: email,\n          password: password\n        })\n      });\n      var resultData = yield result.json();\n      console.log(resultData);\n\n      if (resultData.success) {\n        dispatch({\n          type: LOGIN_USER_SUCCESS,\n          payload: resultData\n        });\n      } else {\n        dispatch({\n          type: LOGIN_USER_FAIL,\n          payload: resultData\n        });\n      }\n\n      return resultData;\n    });\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"names":["REGISTER_USER_SUCCESS","REGISTER_USER_FAIL","LOGIN_USER_SUCCESS","LOGIN_USER_FAIL","BASE_URL","registerUser","authData","email","password","dispatch","result","fetch","method","headers","body","JSON","stringify","resultData","json","console","log","success","type","payload","loginUser"],"sources":["/Users/elodiepradet/Documents/react native/Fridgeease/store/redux/actions/auth.actions.js"],"sourcesContent":["export const REGISTER_USER_SUCCESS = \"REGISTER_USER_SUCCESS\";\nexport const REGISTER_USER_FAIL = \"REGISTER_USER_FAIL\";\nexport const LOGIN_USER_SUCCESS = \"LOGIN_USER_SUCCESS\";\nexport const LOGIN_USER_FAIL = \"LOGIN_USER_FAIL\";\n\nconst BASE_URL = \"https://da35-213-163-151-83.eu.ngrok.io\";\nexport const registerUser = (authData) => {\n  const { email, password } = authData;\n  return async (dispatch) => {\n    const result = await fetch(`${BASE_URL}/api/user/register`, {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        email,\n        password,\n      }),\n    });\n\n    const resultData = await result.json();\n    console.log(resultData);\n    console.log(\"made it\");\n\n    if (resultData.success) {\n      dispatch({\n        type: REGISTER_USER_SUCCESS,\n        payload: resultData,\n      });\n    } else {\n      dispatch({\n        type: REGISTER_USER_FAIL,\n        payload: resultData,\n      });\n    }\n    return resultData;\n  };\n};\n\nexport const loginUser = (authData) => {\n  const { email, password } = authData;\n  return async (dispatch) => {\n    const result = await fetch(`${BASE_URL}/api/user/login`, {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        email,\n        password,\n      }),\n    });\n\n    const resultData = await result.json();\n    console.log(resultData);\n\n    if (resultData.success) {\n      dispatch({\n        type: LOGIN_USER_SUCCESS,\n        payload: resultData,\n      });\n    } else {\n      dispatch({\n        type: LOGIN_USER_FAIL,\n        payload: resultData,\n      });\n    }\n    return resultData;\n  };\n};\n"],"mappings":";AAAA,OAAO,IAAMA,qBAAqB,GAAG,uBAA9B;AACP,OAAO,IAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,IAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AAEP,IAAMC,QAAQ,GAAG,yCAAjB;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD,EAAc;EACxC,IAAQC,KAAR,GAA4BD,QAA5B,CAAQC,KAAR;EAAA,IAAeC,QAAf,GAA4BF,QAA5B,CAAeE,QAAf;EACA;IAAA,6BAAO,WAAOC,QAAP,EAAoB;MACzB,IAAMC,MAAM,SAASC,KAAK,CAAIP,QAAJ,yBAAkC;QAC1DQ,MAAM,EAAE,MADkD;QAE1DC,OAAO,EAAE;UACP,gBAAgB;QADT,CAFiD;QAK1DC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;UACnBT,KAAK,EAALA,KADmB;UAEnBC,QAAQ,EAARA;QAFmB,CAAf;MALoD,CAAlC,CAA1B;MAWA,IAAMS,UAAU,SAASP,MAAM,CAACQ,IAAP,EAAzB;MACAC,OAAO,CAACC,GAAR,CAAYH,UAAZ;MACAE,OAAO,CAACC,GAAR,CAAY,SAAZ;;MAEA,IAAIH,UAAU,CAACI,OAAf,EAAwB;QACtBZ,QAAQ,CAAC;UACPa,IAAI,EAAEtB,qBADC;UAEPuB,OAAO,EAAEN;QAFF,CAAD,CAAR;MAID,CALD,MAKO;QACLR,QAAQ,CAAC;UACPa,IAAI,EAAErB,kBADC;UAEPsB,OAAO,EAAEN;QAFF,CAAD,CAAR;MAID;;MACD,OAAOA,UAAP;IACD,CA5BD;;IAAA;MAAA;IAAA;EAAA;AA6BD,CA/BM;AAiCP,OAAO,IAAMO,SAAS,GAAG,SAAZA,SAAY,CAAClB,QAAD,EAAc;EACrC,IAAQC,KAAR,GAA4BD,QAA5B,CAAQC,KAAR;EAAA,IAAeC,QAAf,GAA4BF,QAA5B,CAAeE,QAAf;EACA;IAAA,8BAAO,WAAOC,QAAP,EAAoB;MACzB,IAAMC,MAAM,SAASC,KAAK,CAAIP,QAAJ,sBAA+B;QACvDQ,MAAM,EAAE,MAD+C;QAEvDC,OAAO,EAAE;UACP,gBAAgB;QADT,CAF8C;QAKvDC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;UACnBT,KAAK,EAALA,KADmB;UAEnBC,QAAQ,EAARA;QAFmB,CAAf;MALiD,CAA/B,CAA1B;MAWA,IAAMS,UAAU,SAASP,MAAM,CAACQ,IAAP,EAAzB;MACAC,OAAO,CAACC,GAAR,CAAYH,UAAZ;;MAEA,IAAIA,UAAU,CAACI,OAAf,EAAwB;QACtBZ,QAAQ,CAAC;UACPa,IAAI,EAAEpB,kBADC;UAEPqB,OAAO,EAAEN;QAFF,CAAD,CAAR;MAID,CALD,MAKO;QACLR,QAAQ,CAAC;UACPa,IAAI,EAAEnB,eADC;UAEPoB,OAAO,EAAEN;QAFF,CAAD,CAAR;MAID;;MACD,OAAOA,UAAP;IACD,CA3BD;;IAAA;MAAA;IAAA;EAAA;AA4BD,CA9BM"},"metadata":{},"sourceType":"module"}